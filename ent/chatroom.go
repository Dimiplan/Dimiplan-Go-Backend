// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dimiplan-backend/ent/chatroom"
	"dimiplan-backend/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChatRoom is the model entity for the ChatRoom schema.
type ChatRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// IsProcessing holds the value of the "isProcessing" field.
	IsProcessing bool `json:"isProcessing,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatRoomQuery when eager-loading is set.
	Edges          ChatRoomEdges `json:"edges"`
	user_chatrooms *string
	selectValues   sql.SelectValues
}

// ChatRoomEdges holds the relations/edges for other nodes in the graph.
type ChatRoomEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Chats holds the value of the chats edge.
	Chats []*Chat `json:"chats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatRoomEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ChatsOrErr returns the Chats value or an error if the edge
// was not loaded in eager-loading.
func (e ChatRoomEdges) ChatsOrErr() ([]*Chat, error) {
	if e.loadedTypes[1] {
		return e.Chats, nil
	}
	return nil, &NotLoadedError{edge: "chats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatRoom) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatroom.FieldIsProcessing:
			values[i] = new(sql.NullBool)
		case chatroom.FieldID:
			values[i] = new(sql.NullInt64)
		case chatroom.FieldOwner, chatroom.FieldType, chatroom.FieldName:
			values[i] = new(sql.NullString)
		case chatroom.FieldCreatedAt, chatroom.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case chatroom.ForeignKeys[0]: // user_chatrooms
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatRoom fields.
func (_m *ChatRoom) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatroom.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case chatroom.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				_m.Owner = value.String
			}
		case chatroom.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case chatroom.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case chatroom.FieldIsProcessing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isProcessing", values[i])
			} else if value.Valid {
				_m.IsProcessing = value.Bool
			}
		case chatroom.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case chatroom.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case chatroom.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_chatrooms", values[i])
			} else if value.Valid {
				_m.user_chatrooms = new(string)
				*_m.user_chatrooms = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatRoom.
// This includes values selected through modifiers, order, etc.
func (_m *ChatRoom) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ChatRoom entity.
func (_m *ChatRoom) QueryUser() *UserQuery {
	return NewChatRoomClient(_m.config).QueryUser(_m)
}

// QueryChats queries the "chats" edge of the ChatRoom entity.
func (_m *ChatRoom) QueryChats() *ChatQuery {
	return NewChatRoomClient(_m.config).QueryChats(_m)
}

// Update returns a builder for updating this ChatRoom.
// Note that you need to call ChatRoom.Unwrap() before calling this method if this ChatRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ChatRoom) Update() *ChatRoomUpdateOne {
	return NewChatRoomClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ChatRoom entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ChatRoom) Unwrap() *ChatRoom {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatRoom is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ChatRoom) String() string {
	var builder strings.Builder
	builder.WriteString("ChatRoom(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("owner=")
	builder.WriteString(_m.Owner)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("isProcessing=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsProcessing))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChatRooms is a parsable slice of ChatRoom.
type ChatRooms []*ChatRoom
