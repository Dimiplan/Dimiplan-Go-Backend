// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dimiplan-backend/ent/chatroom"
	"dimiplan-backend/ent/message"
	"dimiplan-backend/ent/predicate"
	"dimiplan-backend/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatroomUpdate is the builder for updating Chatroom entities.
type ChatroomUpdate struct {
	config
	hooks    []Hook
	mutation *ChatroomMutation
}

// Where appends a list predicates to the ChatroomUpdate builder.
func (_u *ChatroomUpdate) Where(ps ...predicate.Chatroom) *ChatroomUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *ChatroomUpdate) SetName(v string) *ChatroomUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ChatroomUpdate) SetNillableName(v *string) *ChatroomUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *ChatroomUpdate) SetUpdatedAt(v time.Time) *ChatroomUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ChatroomUpdate) SetUserID(id string) *ChatroomUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ChatroomUpdate) SetUser(v *User) *ChatroomUpdate {
	return _u.SetUserID(v.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (_u *ChatroomUpdate) AddMessageIDs(ids ...int) *ChatroomUpdate {
	_u.mutation.AddMessageIDs(ids...)
	return _u
}

// AddMessages adds the "messages" edges to the Message entity.
func (_u *ChatroomUpdate) AddMessages(v ...*Message) *ChatroomUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDs(ids...)
}

// Mutation returns the ChatroomMutation object of the builder.
func (_u *ChatroomUpdate) Mutation() *ChatroomMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ChatroomUpdate) ClearUser() *ChatroomUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearMessages clears all "messages" edges to the Message entity.
func (_u *ChatroomUpdate) ClearMessages() *ChatroomUpdate {
	_u.mutation.ClearMessages()
	return _u
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (_u *ChatroomUpdate) RemoveMessageIDs(ids ...int) *ChatroomUpdate {
	_u.mutation.RemoveMessageIDs(ids...)
	return _u
}

// RemoveMessages removes "messages" edges to Message entities.
func (_u *ChatroomUpdate) RemoveMessages(v ...*Message) *ChatroomUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChatroomUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChatroomUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChatroomUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChatroomUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ChatroomUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := chatroom.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChatroomUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := chatroom.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Chatroom.name": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Chatroom.user"`)
	}
	return nil
}

func (_u *ChatroomUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatroom.Table, chatroom.Columns, sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(chatroom.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(chatroom.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatroom.UserTable,
			Columns: []string{chatroom.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatroom.UserTable,
			Columns: []string{chatroom.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !_u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChatroomUpdateOne is the builder for updating a single Chatroom entity.
type ChatroomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatroomMutation
}

// SetName sets the "name" field.
func (_u *ChatroomUpdateOne) SetName(v string) *ChatroomUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ChatroomUpdateOne) SetNillableName(v *string) *ChatroomUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *ChatroomUpdateOne) SetUpdatedAt(v time.Time) *ChatroomUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ChatroomUpdateOne) SetUserID(id string) *ChatroomUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ChatroomUpdateOne) SetUser(v *User) *ChatroomUpdateOne {
	return _u.SetUserID(v.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (_u *ChatroomUpdateOne) AddMessageIDs(ids ...int) *ChatroomUpdateOne {
	_u.mutation.AddMessageIDs(ids...)
	return _u
}

// AddMessages adds the "messages" edges to the Message entity.
func (_u *ChatroomUpdateOne) AddMessages(v ...*Message) *ChatroomUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDs(ids...)
}

// Mutation returns the ChatroomMutation object of the builder.
func (_u *ChatroomUpdateOne) Mutation() *ChatroomMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ChatroomUpdateOne) ClearUser() *ChatroomUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearMessages clears all "messages" edges to the Message entity.
func (_u *ChatroomUpdateOne) ClearMessages() *ChatroomUpdateOne {
	_u.mutation.ClearMessages()
	return _u
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (_u *ChatroomUpdateOne) RemoveMessageIDs(ids ...int) *ChatroomUpdateOne {
	_u.mutation.RemoveMessageIDs(ids...)
	return _u
}

// RemoveMessages removes "messages" edges to Message entities.
func (_u *ChatroomUpdateOne) RemoveMessages(v ...*Message) *ChatroomUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the ChatroomUpdate builder.
func (_u *ChatroomUpdateOne) Where(ps ...predicate.Chatroom) *ChatroomUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChatroomUpdateOne) Select(field string, fields ...string) *ChatroomUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Chatroom entity.
func (_u *ChatroomUpdateOne) Save(ctx context.Context) (*Chatroom, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChatroomUpdateOne) SaveX(ctx context.Context) *Chatroom {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChatroomUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChatroomUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ChatroomUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := chatroom.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChatroomUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := chatroom.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Chatroom.name": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Chatroom.user"`)
	}
	return nil
}

func (_u *ChatroomUpdateOne) sqlSave(ctx context.Context) (_node *Chatroom, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatroom.Table, chatroom.Columns, sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chatroom.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatroom.FieldID)
		for _, f := range fields {
			if !chatroom.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatroom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(chatroom.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(chatroom.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatroom.UserTable,
			Columns: []string{chatroom.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatroom.UserTable,
			Columns: []string{chatroom.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !_u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.MessagesTable,
			Columns: []string{chatroom.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chatroom{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
