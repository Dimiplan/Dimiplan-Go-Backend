// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dimiplan-backend/ent/chat"
	"dimiplan-backend/ent/chatroom"
	"dimiplan-backend/ent/predicate"
	"dimiplan-backend/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatRoomUpdate is the builder for updating ChatRoom entities.
type ChatRoomUpdate struct {
	config
	hooks    []Hook
	mutation *ChatRoomMutation
}

// Where appends a list predicates to the ChatRoomUpdate builder.
func (_u *ChatRoomUpdate) Where(ps ...predicate.ChatRoom) *ChatRoomUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetType sets the "type" field.
func (_u *ChatRoomUpdate) SetType(v string) *ChatRoomUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ChatRoomUpdate) SetNillableType(v *string) *ChatRoomUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ChatRoomUpdate) SetName(v string) *ChatRoomUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ChatRoomUpdate) SetNillableName(v *string) *ChatRoomUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetIsProcessing sets the "isProcessing" field.
func (_u *ChatRoomUpdate) SetIsProcessing(v bool) *ChatRoomUpdate {
	_u.mutation.SetIsProcessing(v)
	return _u
}

// SetNillableIsProcessing sets the "isProcessing" field if the given value is not nil.
func (_u *ChatRoomUpdate) SetNillableIsProcessing(v *bool) *ChatRoomUpdate {
	if v != nil {
		_u.SetIsProcessing(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *ChatRoomUpdate) SetUpdatedAt(v time.Time) *ChatRoomUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ChatRoomUpdate) SetUserID(id string) *ChatRoomUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ChatRoomUpdate) SetUser(v *User) *ChatRoomUpdate {
	return _u.SetUserID(v.ID)
}

// AddChatIDs adds the "chats" edge to the Chat entity by IDs.
func (_u *ChatRoomUpdate) AddChatIDs(ids ...int) *ChatRoomUpdate {
	_u.mutation.AddChatIDs(ids...)
	return _u
}

// AddChats adds the "chats" edges to the Chat entity.
func (_u *ChatRoomUpdate) AddChats(v ...*Chat) *ChatRoomUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChatIDs(ids...)
}

// Mutation returns the ChatRoomMutation object of the builder.
func (_u *ChatRoomUpdate) Mutation() *ChatRoomMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ChatRoomUpdate) ClearUser() *ChatRoomUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearChats clears all "chats" edges to the Chat entity.
func (_u *ChatRoomUpdate) ClearChats() *ChatRoomUpdate {
	_u.mutation.ClearChats()
	return _u
}

// RemoveChatIDs removes the "chats" edge to Chat entities by IDs.
func (_u *ChatRoomUpdate) RemoveChatIDs(ids ...int) *ChatRoomUpdate {
	_u.mutation.RemoveChatIDs(ids...)
	return _u
}

// RemoveChats removes "chats" edges to Chat entities.
func (_u *ChatRoomUpdate) RemoveChats(v ...*Chat) *ChatRoomUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChatRoomUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChatRoomUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChatRoomUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChatRoomUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ChatRoomUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := chatroom.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChatRoomUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := chatroom.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ChatRoom.name": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatRoom.user"`)
	}
	return nil
}

func (_u *ChatRoomUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatroom.Table, chatroom.Columns, sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(chatroom.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(chatroom.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsProcessing(); ok {
		_spec.SetField(chatroom.FieldIsProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(chatroom.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatroom.UserTable,
			Columns: []string{chatroom.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatroom.UserTable,
			Columns: []string{chatroom.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.ChatsTable,
			Columns: []string{chatroom.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChatsIDs(); len(nodes) > 0 && !_u.mutation.ChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.ChatsTable,
			Columns: []string{chatroom.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.ChatsTable,
			Columns: []string{chatroom.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChatRoomUpdateOne is the builder for updating a single ChatRoom entity.
type ChatRoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatRoomMutation
}

// SetType sets the "type" field.
func (_u *ChatRoomUpdateOne) SetType(v string) *ChatRoomUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ChatRoomUpdateOne) SetNillableType(v *string) *ChatRoomUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ChatRoomUpdateOne) SetName(v string) *ChatRoomUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ChatRoomUpdateOne) SetNillableName(v *string) *ChatRoomUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetIsProcessing sets the "isProcessing" field.
func (_u *ChatRoomUpdateOne) SetIsProcessing(v bool) *ChatRoomUpdateOne {
	_u.mutation.SetIsProcessing(v)
	return _u
}

// SetNillableIsProcessing sets the "isProcessing" field if the given value is not nil.
func (_u *ChatRoomUpdateOne) SetNillableIsProcessing(v *bool) *ChatRoomUpdateOne {
	if v != nil {
		_u.SetIsProcessing(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *ChatRoomUpdateOne) SetUpdatedAt(v time.Time) *ChatRoomUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ChatRoomUpdateOne) SetUserID(id string) *ChatRoomUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ChatRoomUpdateOne) SetUser(v *User) *ChatRoomUpdateOne {
	return _u.SetUserID(v.ID)
}

// AddChatIDs adds the "chats" edge to the Chat entity by IDs.
func (_u *ChatRoomUpdateOne) AddChatIDs(ids ...int) *ChatRoomUpdateOne {
	_u.mutation.AddChatIDs(ids...)
	return _u
}

// AddChats adds the "chats" edges to the Chat entity.
func (_u *ChatRoomUpdateOne) AddChats(v ...*Chat) *ChatRoomUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChatIDs(ids...)
}

// Mutation returns the ChatRoomMutation object of the builder.
func (_u *ChatRoomUpdateOne) Mutation() *ChatRoomMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ChatRoomUpdateOne) ClearUser() *ChatRoomUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearChats clears all "chats" edges to the Chat entity.
func (_u *ChatRoomUpdateOne) ClearChats() *ChatRoomUpdateOne {
	_u.mutation.ClearChats()
	return _u
}

// RemoveChatIDs removes the "chats" edge to Chat entities by IDs.
func (_u *ChatRoomUpdateOne) RemoveChatIDs(ids ...int) *ChatRoomUpdateOne {
	_u.mutation.RemoveChatIDs(ids...)
	return _u
}

// RemoveChats removes "chats" edges to Chat entities.
func (_u *ChatRoomUpdateOne) RemoveChats(v ...*Chat) *ChatRoomUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChatIDs(ids...)
}

// Where appends a list predicates to the ChatRoomUpdate builder.
func (_u *ChatRoomUpdateOne) Where(ps ...predicate.ChatRoom) *ChatRoomUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChatRoomUpdateOne) Select(field string, fields ...string) *ChatRoomUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ChatRoom entity.
func (_u *ChatRoomUpdateOne) Save(ctx context.Context) (*ChatRoom, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChatRoomUpdateOne) SaveX(ctx context.Context) *ChatRoom {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChatRoomUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChatRoomUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ChatRoomUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := chatroom.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChatRoomUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := chatroom.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ChatRoom.name": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatRoom.user"`)
	}
	return nil
}

func (_u *ChatRoomUpdateOne) sqlSave(ctx context.Context) (_node *ChatRoom, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatroom.Table, chatroom.Columns, sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatRoom.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatroom.FieldID)
		for _, f := range fields {
			if !chatroom.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatroom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(chatroom.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(chatroom.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsProcessing(); ok {
		_spec.SetField(chatroom.FieldIsProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(chatroom.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatroom.UserTable,
			Columns: []string{chatroom.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatroom.UserTable,
			Columns: []string{chatroom.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.ChatsTable,
			Columns: []string{chatroom.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChatsIDs(); len(nodes) > 0 && !_u.mutation.ChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.ChatsTable,
			Columns: []string{chatroom.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatroom.ChatsTable,
			Columns: []string{chatroom.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatRoom{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
