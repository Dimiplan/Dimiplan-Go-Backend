// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChatsColumns holds the columns for the "chats" table.
	ChatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "sender", Type: field.TypeString},
		{Name: "message", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "chat_room_chats", Type: field.TypeInt},
	}
	// ChatsTable holds the schema information for the "chats" table.
	ChatsTable = &schema.Table{
		Name:       "chats",
		Columns:    ChatsColumns,
		PrimaryKey: []*schema.Column{ChatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chats_chat_rooms_chats",
				Columns:    []*schema.Column{ChatsColumns[5]},
				RefColumns: []*schema.Column{ChatRoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ChatRoomsColumns holds the columns for the "chat_rooms" table.
	ChatRoomsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "is_processing", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_chatrooms", Type: field.TypeString},
	}
	// ChatRoomsTable holds the schema information for the "chat_rooms" table.
	ChatRoomsTable = &schema.Table{
		Name:       "chat_rooms",
		Columns:    ChatRoomsColumns,
		PrimaryKey: []*schema.Column{ChatRoomsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chat_rooms_users_chatrooms",
				Columns:    []*schema.Column{ChatRoomsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlannersColumns holds the columns for the "planners" table.
	PlannersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_planners", Type: field.TypeString},
	}
	// PlannersTable holds the schema information for the "planners" table.
	PlannersTable = &schema.Table{
		Name:       "planners",
		Columns:    PlannersColumns,
		PrimaryKey: []*schema.Column{PlannersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "planners_users_planners",
				Columns:    []*schema.Column{PlannersColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "deadline", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "priority", Type: field.TypeInt, Default: 1},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "planner_tasks", Type: field.TypeInt},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_planners_tasks",
				Columns:    []*schema.Column{TasksColumns[6]},
				RefColumns: []*schema.Column{PlannersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "profile_url", Type: field.TypeString},
		{Name: "plan", Type: field.TypeString, Default: "free"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChatsTable,
		ChatRoomsTable,
		PlannersTable,
		TasksTable,
		UsersTable,
	}
)

func init() {
	ChatsTable.ForeignKeys[0].RefTable = ChatRoomsTable
	ChatRoomsTable.ForeignKeys[0].RefTable = UsersTable
	PlannersTable.ForeignKeys[0].RefTable = UsersTable
	TasksTable.ForeignKeys[0].RefTable = PlannersTable
}
