// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dimiplan-backend/ent/planner"
	"dimiplan-backend/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Planner is the model entity for the Planner schema.
type Planner struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id"`
	// Type holds the value of the "type" field.
	Type string `json:"type"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlannerQuery when eager-loading is set.
	Edges         PlannerEdges `json:"-"`
	user_planners *string
	selectValues  sql.SelectValues
}

// PlannerEdges holds the relations/edges for other nodes in the graph.
type PlannerEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlannerEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e PlannerEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Planner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case planner.FieldID:
			values[i] = new(sql.NullInt64)
		case planner.FieldType, planner.FieldName:
			values[i] = new(sql.NullString)
		case planner.FieldCreatedAt, planner.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case planner.ForeignKeys[0]: // user_planners
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Planner fields.
func (_m *Planner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case planner.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case planner.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case planner.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case planner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case planner.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case planner.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_planners", values[i])
			} else if value.Valid {
				_m.user_planners = new(string)
				*_m.user_planners = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Planner.
// This includes values selected through modifiers, order, etc.
func (_m *Planner) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Planner entity.
func (_m *Planner) QueryUser() *UserQuery {
	return NewPlannerClient(_m.config).QueryUser(_m)
}

// QueryTasks queries the "tasks" edge of the Planner entity.
func (_m *Planner) QueryTasks() *TaskQuery {
	return NewPlannerClient(_m.config).QueryTasks(_m)
}

// Update returns a builder for updating this Planner.
// Note that you need to call Planner.Unwrap() before calling this method if this Planner
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Planner) Update() *PlannerUpdateOne {
	return NewPlannerClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Planner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Planner) Unwrap() *Planner {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Planner is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Planner) String() string {
	var builder strings.Builder
	builder.WriteString("Planner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (_m *Planner) MarshalJSON() ([]byte, error) {
	type Alias Planner
	return json.Marshal(&struct {
		*Alias
		PlannerEdges
	}{
		Alias:        (*Alias)(_m),
		PlannerEdges: _m.Edges,
	})
}

// Planners is a parsable slice of Planner.
type Planners []*Planner
