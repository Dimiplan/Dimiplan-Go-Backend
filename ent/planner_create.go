// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dimiplan-backend/ent/planner"
	"dimiplan-backend/ent/task"
	"dimiplan-backend/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlannerCreate is the builder for creating a Planner entity.
type PlannerCreate struct {
	config
	mutation *PlannerMutation
	hooks    []Hook
}

// SetOwner sets the "owner" field.
func (_c *PlannerCreate) SetOwner(v string) *PlannerCreate {
	_c.mutation.SetOwner(v)
	return _c
}

// SetType sets the "type" field.
func (_c *PlannerCreate) SetType(v string) *PlannerCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetName sets the "name" field.
func (_c *PlannerCreate) SetName(v string) *PlannerCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetCreatedAt sets the "createdAt" field.
func (_c *PlannerCreate) SetCreatedAt(v time.Time) *PlannerCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (_c *PlannerCreate) SetNillableCreatedAt(v *time.Time) *PlannerCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updatedAt" field.
func (_c *PlannerCreate) SetUpdatedAt(v time.Time) *PlannerCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (_c *PlannerCreate) SetNillableUpdatedAt(v *time.Time) *PlannerCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *PlannerCreate) SetUserID(id string) *PlannerCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *PlannerCreate) SetUser(v *User) *PlannerCreate {
	return _c.SetUserID(v.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_c *PlannerCreate) AddTaskIDs(ids ...int) *PlannerCreate {
	_c.mutation.AddTaskIDs(ids...)
	return _c
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_c *PlannerCreate) AddTasks(v ...*Task) *PlannerCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTaskIDs(ids...)
}

// Mutation returns the PlannerMutation object of the builder.
func (_c *PlannerCreate) Mutation() *PlannerMutation {
	return _c.mutation
}

// Save creates the Planner in the database.
func (_c *PlannerCreate) Save(ctx context.Context) (*Planner, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PlannerCreate) SaveX(ctx context.Context) *Planner {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlannerCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlannerCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PlannerCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := planner.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := planner.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PlannerCreate) check() error {
	if _, ok := _c.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Planner.owner"`)}
	}
	if v, ok := _c.mutation.Owner(); ok {
		if err := planner.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Planner.owner": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Planner.type"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Planner.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := planner.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Planner.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Planner.createdAt"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Planner.updatedAt"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Planner.user"`)}
	}
	return nil
}

func (_c *PlannerCreate) sqlSave(ctx context.Context) (*Planner, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PlannerCreate) createSpec() (*Planner, *sqlgraph.CreateSpec) {
	var (
		_node = &Planner{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(planner.Table, sqlgraph.NewFieldSpec(planner.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Owner(); ok {
		_spec.SetField(planner.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(planner.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(planner.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(planner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(planner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planner.UserTable,
			Columns: []string{planner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_planners = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planner.TasksTable,
			Columns: []string{planner.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlannerCreateBulk is the builder for creating many Planner entities in bulk.
type PlannerCreateBulk struct {
	config
	err      error
	builders []*PlannerCreate
}

// Save creates the Planner entities in the database.
func (_c *PlannerCreateBulk) Save(ctx context.Context) ([]*Planner, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Planner, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlannerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PlannerCreateBulk) SaveX(ctx context.Context) []*Planner {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlannerCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlannerCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
