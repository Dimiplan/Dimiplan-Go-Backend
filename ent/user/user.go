// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldProfileURL holds the string denoting the profileurl field in the database.
	FieldProfileURL = "profile_url"
	// FieldPlan holds the string denoting the plan field in the database.
	FieldPlan = "plan"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePlanners holds the string denoting the planners edge name in mutations.
	EdgePlanners = "planners"
	// EdgeChatrooms holds the string denoting the chatrooms edge name in mutations.
	EdgeChatrooms = "chatrooms"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PlannersTable is the table that holds the planners relation/edge.
	PlannersTable = "planners"
	// PlannersInverseTable is the table name for the Planner entity.
	// It exists in this package in order to avoid circular dependency with the "planner" package.
	PlannersInverseTable = "planners"
	// PlannersColumn is the table column denoting the planners relation/edge.
	PlannersColumn = "user_planners"
	// ChatroomsTable is the table that holds the chatrooms relation/edge.
	ChatroomsTable = "chatrooms"
	// ChatroomsInverseTable is the table name for the Chatroom entity.
	// It exists in this package in order to avoid circular dependency with the "chatroom" package.
	ChatroomsInverseTable = "chatrooms"
	// ChatroomsColumn is the table column denoting the chatrooms relation/edge.
	ChatroomsColumn = "user_chatrooms"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldProfileURL,
	FieldPlan,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// ProfileURLValidator is a validator for the "profileURL" field. It is called by the builders before save.
	ProfileURLValidator func(string) error
	// DefaultPlan holds the default value on creation for the "plan" field.
	DefaultPlan string
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByProfileURL orders the results by the profileURL field.
func ByProfileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileURL, opts...).ToFunc()
}

// ByPlan orders the results by the plan field.
func ByPlan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlan, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPlannersCount orders the results by planners count.
func ByPlannersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlannersStep(), opts...)
	}
}

// ByPlanners orders the results by planners terms.
func ByPlanners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlannersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChatroomsCount orders the results by chatrooms count.
func ByChatroomsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChatroomsStep(), opts...)
	}
}

// ByChatrooms orders the results by chatrooms terms.
func ByChatrooms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChatroomsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlannersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlannersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlannersTable, PlannersColumn),
	)
}
func newChatroomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChatroomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChatroomsTable, ChatroomsColumn),
	)
}
