// Code generated by ent, DO NOT EDIT.

package user

import (
	"dimiplan-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// ProfileURL applies equality check predicate on the "profileURL" field. It's identical to ProfileURLEQ.
func ProfileURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileURL, v))
}

// Admin applies equality check predicate on the "admin" field. It's identical to AdminEQ.
func Admin(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAdmin, v))
}

// Plan applies equality check predicate on the "plan" field. It's identical to PlanEQ.
func Plan(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlan, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// ProfileURLEQ applies the EQ predicate on the "profileURL" field.
func ProfileURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileURL, v))
}

// ProfileURLNEQ applies the NEQ predicate on the "profileURL" field.
func ProfileURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProfileURL, v))
}

// ProfileURLIn applies the In predicate on the "profileURL" field.
func ProfileURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldProfileURL, vs...))
}

// ProfileURLNotIn applies the NotIn predicate on the "profileURL" field.
func ProfileURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProfileURL, vs...))
}

// ProfileURLGT applies the GT predicate on the "profileURL" field.
func ProfileURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldProfileURL, v))
}

// ProfileURLGTE applies the GTE predicate on the "profileURL" field.
func ProfileURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProfileURL, v))
}

// ProfileURLLT applies the LT predicate on the "profileURL" field.
func ProfileURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldProfileURL, v))
}

// ProfileURLLTE applies the LTE predicate on the "profileURL" field.
func ProfileURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProfileURL, v))
}

// ProfileURLContains applies the Contains predicate on the "profileURL" field.
func ProfileURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldProfileURL, v))
}

// ProfileURLHasPrefix applies the HasPrefix predicate on the "profileURL" field.
func ProfileURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldProfileURL, v))
}

// ProfileURLHasSuffix applies the HasSuffix predicate on the "profileURL" field.
func ProfileURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldProfileURL, v))
}

// ProfileURLEqualFold applies the EqualFold predicate on the "profileURL" field.
func ProfileURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldProfileURL, v))
}

// ProfileURLContainsFold applies the ContainsFold predicate on the "profileURL" field.
func ProfileURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldProfileURL, v))
}

// AdminEQ applies the EQ predicate on the "admin" field.
func AdminEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAdmin, v))
}

// AdminNEQ applies the NEQ predicate on the "admin" field.
func AdminNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAdmin, v))
}

// PlanEQ applies the EQ predicate on the "plan" field.
func PlanEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPlan, v))
}

// PlanNEQ applies the NEQ predicate on the "plan" field.
func PlanNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPlan, v))
}

// PlanIn applies the In predicate on the "plan" field.
func PlanIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPlan, vs...))
}

// PlanNotIn applies the NotIn predicate on the "plan" field.
func PlanNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPlan, vs...))
}

// PlanGT applies the GT predicate on the "plan" field.
func PlanGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPlan, v))
}

// PlanGTE applies the GTE predicate on the "plan" field.
func PlanGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPlan, v))
}

// PlanLT applies the LT predicate on the "plan" field.
func PlanLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPlan, v))
}

// PlanLTE applies the LTE predicate on the "plan" field.
func PlanLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPlan, v))
}

// PlanContains applies the Contains predicate on the "plan" field.
func PlanContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPlan, v))
}

// PlanHasPrefix applies the HasPrefix predicate on the "plan" field.
func PlanHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPlan, v))
}

// PlanHasSuffix applies the HasSuffix predicate on the "plan" field.
func PlanHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPlan, v))
}

// PlanEqualFold applies the EqualFold predicate on the "plan" field.
func PlanEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPlan, v))
}

// PlanContainsFold applies the ContainsFold predicate on the "plan" field.
func PlanContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPlan, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPlanners applies the HasEdge predicate on the "planners" edge.
func HasPlanners() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlannersTable, PlannersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlannersWith applies the HasEdge predicate on the "planners" edge with a given conditions (other predicates).
func HasPlannersWith(preds ...predicate.Planner) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPlannersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChatrooms applies the HasEdge predicate on the "chatrooms" edge.
func HasChatrooms() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChatroomsTable, ChatroomsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChatroomsWith applies the HasEdge predicate on the "chatrooms" edge with a given conditions (other predicates).
func HasChatroomsWith(preds ...predicate.ChatRoom) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newChatroomsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
