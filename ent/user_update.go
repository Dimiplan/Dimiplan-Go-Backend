// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dimiplan-backend/ent/chatroom"
	"dimiplan-backend/ent/planner"
	"dimiplan-backend/ent/predicate"
	"dimiplan-backend/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetProfileURL sets the "profileURL" field.
func (_u *UserUpdate) SetProfileURL(v string) *UserUpdate {
	_u.mutation.SetProfileURL(v)
	return _u
}

// SetNillableProfileURL sets the "profileURL" field if the given value is not nil.
func (_u *UserUpdate) SetNillableProfileURL(v *string) *UserUpdate {
	if v != nil {
		_u.SetProfileURL(*v)
	}
	return _u
}

// SetPlan sets the "plan" field.
func (_u *UserUpdate) SetPlan(v string) *UserUpdate {
	_u.mutation.SetPlan(v)
	return _u
}

// SetNillablePlan sets the "plan" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePlan(v *string) *UserUpdate {
	if v != nil {
		_u.SetPlan(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProcessingData sets the "processingData" field.
func (_u *UserUpdate) SetProcessingData(v string) *UserUpdate {
	_u.mutation.SetProcessingData(v)
	return _u
}

// SetNillableProcessingData sets the "processingData" field if the given value is not nil.
func (_u *UserUpdate) SetNillableProcessingData(v *string) *UserUpdate {
	if v != nil {
		_u.SetProcessingData(*v)
	}
	return _u
}

// ClearProcessingData clears the value of the "processingData" field.
func (_u *UserUpdate) ClearProcessingData() *UserUpdate {
	_u.mutation.ClearProcessingData()
	return _u
}

// AddPlannerIDs adds the "planners" edge to the Planner entity by IDs.
func (_u *UserUpdate) AddPlannerIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPlannerIDs(ids...)
	return _u
}

// AddPlanners adds the "planners" edges to the Planner entity.
func (_u *UserUpdate) AddPlanners(v ...*Planner) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPlannerIDs(ids...)
}

// AddOwnedChatroomIDs adds the "owned_chatrooms" edge to the Chatroom entity by IDs.
func (_u *UserUpdate) AddOwnedChatroomIDs(ids ...int) *UserUpdate {
	_u.mutation.AddOwnedChatroomIDs(ids...)
	return _u
}

// AddOwnedChatrooms adds the "owned_chatrooms" edges to the Chatroom entity.
func (_u *UserUpdate) AddOwnedChatrooms(v ...*Chatroom) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOwnedChatroomIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearPlanners clears all "planners" edges to the Planner entity.
func (_u *UserUpdate) ClearPlanners() *UserUpdate {
	_u.mutation.ClearPlanners()
	return _u
}

// RemovePlannerIDs removes the "planners" edge to Planner entities by IDs.
func (_u *UserUpdate) RemovePlannerIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePlannerIDs(ids...)
	return _u
}

// RemovePlanners removes "planners" edges to Planner entities.
func (_u *UserUpdate) RemovePlanners(v ...*Planner) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePlannerIDs(ids...)
}

// ClearOwnedChatrooms clears all "owned_chatrooms" edges to the Chatroom entity.
func (_u *UserUpdate) ClearOwnedChatrooms() *UserUpdate {
	_u.mutation.ClearOwnedChatrooms()
	return _u
}

// RemoveOwnedChatroomIDs removes the "owned_chatrooms" edge to Chatroom entities by IDs.
func (_u *UserUpdate) RemoveOwnedChatroomIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveOwnedChatroomIDs(ids...)
	return _u
}

// RemoveOwnedChatrooms removes "owned_chatrooms" edges to Chatroom entities.
func (_u *UserUpdate) RemoveOwnedChatrooms(v ...*Chatroom) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOwnedChatroomIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProfileURL(); ok {
		if err := user.ProfileURLValidator(v); err != nil {
			return &ValidationError{Name: "profileURL", err: fmt.Errorf(`ent: validator failed for field "User.profileURL": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProfileURL(); ok {
		_spec.SetField(user.FieldProfileURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Plan(); ok {
		_spec.SetField(user.FieldPlan, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ProcessingData(); ok {
		_spec.SetField(user.FieldProcessingData, field.TypeString, value)
	}
	if _u.mutation.ProcessingDataCleared() {
		_spec.ClearField(user.FieldProcessingData, field.TypeString)
	}
	if _u.mutation.PlannersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlannersTable,
			Columns: []string{user.PlannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPlannersIDs(); len(nodes) > 0 && !_u.mutation.PlannersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlannersTable,
			Columns: []string{user.PlannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlannersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlannersTable,
			Columns: []string{user.PlannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnedChatroomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedChatroomsTable,
			Columns: []string{user.OwnedChatroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOwnedChatroomsIDs(); len(nodes) > 0 && !_u.mutation.OwnedChatroomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedChatroomsTable,
			Columns: []string{user.OwnedChatroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnedChatroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedChatroomsTable,
			Columns: []string{user.OwnedChatroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetProfileURL sets the "profileURL" field.
func (_u *UserUpdateOne) SetProfileURL(v string) *UserUpdateOne {
	_u.mutation.SetProfileURL(v)
	return _u
}

// SetNillableProfileURL sets the "profileURL" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableProfileURL(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetProfileURL(*v)
	}
	return _u
}

// SetPlan sets the "plan" field.
func (_u *UserUpdateOne) SetPlan(v string) *UserUpdateOne {
	_u.mutation.SetPlan(v)
	return _u
}

// SetNillablePlan sets the "plan" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePlan(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPlan(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProcessingData sets the "processingData" field.
func (_u *UserUpdateOne) SetProcessingData(v string) *UserUpdateOne {
	_u.mutation.SetProcessingData(v)
	return _u
}

// SetNillableProcessingData sets the "processingData" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableProcessingData(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetProcessingData(*v)
	}
	return _u
}

// ClearProcessingData clears the value of the "processingData" field.
func (_u *UserUpdateOne) ClearProcessingData() *UserUpdateOne {
	_u.mutation.ClearProcessingData()
	return _u
}

// AddPlannerIDs adds the "planners" edge to the Planner entity by IDs.
func (_u *UserUpdateOne) AddPlannerIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPlannerIDs(ids...)
	return _u
}

// AddPlanners adds the "planners" edges to the Planner entity.
func (_u *UserUpdateOne) AddPlanners(v ...*Planner) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPlannerIDs(ids...)
}

// AddOwnedChatroomIDs adds the "owned_chatrooms" edge to the Chatroom entity by IDs.
func (_u *UserUpdateOne) AddOwnedChatroomIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddOwnedChatroomIDs(ids...)
	return _u
}

// AddOwnedChatrooms adds the "owned_chatrooms" edges to the Chatroom entity.
func (_u *UserUpdateOne) AddOwnedChatrooms(v ...*Chatroom) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOwnedChatroomIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearPlanners clears all "planners" edges to the Planner entity.
func (_u *UserUpdateOne) ClearPlanners() *UserUpdateOne {
	_u.mutation.ClearPlanners()
	return _u
}

// RemovePlannerIDs removes the "planners" edge to Planner entities by IDs.
func (_u *UserUpdateOne) RemovePlannerIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePlannerIDs(ids...)
	return _u
}

// RemovePlanners removes "planners" edges to Planner entities.
func (_u *UserUpdateOne) RemovePlanners(v ...*Planner) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePlannerIDs(ids...)
}

// ClearOwnedChatrooms clears all "owned_chatrooms" edges to the Chatroom entity.
func (_u *UserUpdateOne) ClearOwnedChatrooms() *UserUpdateOne {
	_u.mutation.ClearOwnedChatrooms()
	return _u
}

// RemoveOwnedChatroomIDs removes the "owned_chatrooms" edge to Chatroom entities by IDs.
func (_u *UserUpdateOne) RemoveOwnedChatroomIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveOwnedChatroomIDs(ids...)
	return _u
}

// RemoveOwnedChatrooms removes "owned_chatrooms" edges to Chatroom entities.
func (_u *UserUpdateOne) RemoveOwnedChatrooms(v ...*Chatroom) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOwnedChatroomIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProfileURL(); ok {
		if err := user.ProfileURLValidator(v); err != nil {
			return &ValidationError{Name: "profileURL", err: fmt.Errorf(`ent: validator failed for field "User.profileURL": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProfileURL(); ok {
		_spec.SetField(user.FieldProfileURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Plan(); ok {
		_spec.SetField(user.FieldPlan, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ProcessingData(); ok {
		_spec.SetField(user.FieldProcessingData, field.TypeString, value)
	}
	if _u.mutation.ProcessingDataCleared() {
		_spec.ClearField(user.FieldProcessingData, field.TypeString)
	}
	if _u.mutation.PlannersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlannersTable,
			Columns: []string{user.PlannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPlannersIDs(); len(nodes) > 0 && !_u.mutation.PlannersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlannersTable,
			Columns: []string{user.PlannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlannersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlannersTable,
			Columns: []string{user.PlannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnedChatroomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedChatroomsTable,
			Columns: []string{user.OwnedChatroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOwnedChatroomsIDs(); len(nodes) > 0 && !_u.mutation.OwnedChatroomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedChatroomsTable,
			Columns: []string{user.OwnedChatroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnedChatroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedChatroomsTable,
			Columns: []string{user.OwnedChatroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
